package DataAccess;

import Application.CurrentUser;
import Business.User;
import Exceptions.DaoException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

/**
 * @date 16/10/2013
 * @author Paul Millar <D00152098>
 */
public class UserDao extends Dao implements IUserDao{

    /**
     * Registers / Adds a new user to the database. The user ID is automatically generated by the DBMS.
     * @param user 
     * @return boolean 'true' if insert was successful, 'false' otherwise.
     * @throws DaoException
     */    
    @Override
    public boolean insert(User user) throws DaoException {
                
        // Note: users table only allows unique values for 'id' column as it is the Primary Key & AUTO_INCREMENTED.
        // Therefore, any violations of the primary key will be caught here by the DBMS.
        
        // Make sure user is valid
        if(!user.isValid()){
            user.displayErrors();
            throw new DaoException("USER HAS ERRORS, PLEASE TRY AGAIN.");
        }
        
        Connection          conn    = null;
        PreparedStatement   ps      = null;
        ResultSet           rs      = null;  
        ResultSet           checkrs = null;

        try{
            conn = getConnection();       
            
            // We are going to check first if the email address is already in use.
            // If this is the case then we will warn the user and return false;
            
            String query = "SELECT id FROM users where email = ?";
            ps = conn.prepareStatement(query);
            ps.setString(1, user.getEmail());
            checkrs = ps.executeQuery();
            
            if(checkrs.next()){
                // Not going to throw an exception, rather just gracefully alert the user and allow them to retry.
                user.setEmail("");  // reset the email
                return false;       // exit
            }
                        
            String sql = "INSERT INTO users (name,email,password) VALUES (?,?,?)";
            
            // Persist & get the newly generated key for the 'id' column.
            ps = conn.prepareStatement(sql,PreparedStatement.RETURN_GENERATED_KEYS);
            ps.setString(1, user.getName());            
            ps.setString(2, user.getEmail());   
            ps.setString(3, user.getPassword()); 
            
            ps.executeUpdate();            
            rs = ps.getGeneratedKeys();
            if(rs.next()){
                user.setId(rs.getInt(1));
            }
        }
        catch (SQLException e) {
            throw new DaoException("UserDao.insert(): " + e.getMessage()); 
        }
        finally{
            freeResultSet(checkrs);
            freeResources("UserDao.insert()",conn,ps,rs);
        }
        
        // Return true or false based on wheteher there is now a new user id.
        return (user.getId() > 0 ? true : false);
    }

    /**
     * Updates users details.
     * @param user the user object with the changed details.
     * @return boolean 'true' if update was successful, 'false' otherwise.
     * @throws DaoException
     */
    @Override
    public boolean update(int currentId, User user) throws DaoException {
        
        // Note: users table only allows unique values for 'id' column as it is the Primary Key & AUTO_INCREMENTED.
        // Any violations of the primary key would have being caught by the DBMS upon insert().
        // Also, Because email address for each user are unique, we must first check for a matching email
        // in case a user has changed it to one that already exists.
        // MAJOR NOTE: We only ever update the 'name','email' & 'password' columns, not the 'id' column.
        
        // Make sure user is valid
        if(!user.isValid()){
            user.displayErrors();
            throw new DaoException("USER HAS ERRORS, PLEASE TRY AGAIN.");
        }
                
        Connection          conn            = null;
        PreparedStatement   ps              = null;
        ResultSet           rs              = null;  
        int                 rowsAffected    = 0;
        
        try{
            conn = getConnection();            
            String sql = "UPDATE users SET name = ?, email = ?, password = ? WHERE id = ?";
            
            ps = conn.prepareStatement(sql);
            ps.setString(1, user.getName());            
            ps.setString(2, user.getEmail());   
            ps.setString(3, user.getPassword());             
            ps.setInt(4, currentId);
            
            rowsAffected = ps.executeUpdate();            
        }
        catch (SQLException e) {
            throw new DaoException("UserDao.update(): " + e.getMessage()); 
        }
        finally{
            freeResources("UserDao.update()",conn,ps,rs);
        }
        
        // Return true or false based on wheteher a single row was affected / or not.
        return (rowsAffected == 1 ? true : false);
    }

    /**
     * Deletes a user that matches the supplied id value. This will not allow administrators to be deleted.
     * @param userId
     * @return true if the delete was successful, false otherwise.
     * @throws DaoException
     */
    @Override
    public boolean delete(User user) throws DaoException {
        
        // Note (1): We must first check to see if the user we are about to delete, exists and is an administrator.
        // If so, we will warn the user that we cannot remove an administrator, and exit.
        // Otherwise we'll go ahead with the delete.
        
        // Note (2): If this user has a loan history then we cannot remove them either.
        //           This is handled by referential constraints on the DBMS

        
        // We have to be an administrator to perform this operation.
        if(!CurrentUser.isAdministrator()){
            throw new DaoException("UserDao.delete() - YOU MUST BE AN ADMINISTRATOR TO PERFORM THIS ACTION");
        }        

        if(user.isAdmin()){
            throw new DaoException("UserDao.delete() - REMOVAL OF ADMINISTRATORS IS PROHIBITED !!!");
        }
        
        String sql = "DELETE FROM users WHERE email = ?";   
        Connection          conn            = null;
        PreparedStatement   ps              = null;
        ResultSet           rs              = null;  
        int                 rowsAffected    = 0;   

        try{
            conn = getConnection();            
         
            ps = conn.prepareStatement(sql);
            ps.setString(1, user.getEmail()); 
            
            rowsAffected = ps.executeUpdate();            
        }
        catch (SQLException e) {
            throw new DaoException("UserDao.delete(): " + e.getMessage()); 
        }
        finally{
            freeResources("UserDao.delete()",conn,ps,rs);
        }
        
        // Return true or false based on wheteher a single row was affected / or not.
        return (rowsAffected == 1 ? true : false);
    }

    /**
     * Logs the current user in
     * @param email unique email address
     * @param password
     * @return The users full details
     * @throws DaoException
     */
    @Override
    public User getUserLogIn(String email, String password) throws DaoException {

        Connection          conn    = null;
        PreparedStatement   ps      = null;
        ResultSet           rs      = null;  
        User                user    = null;
        
        try{
            conn = getConnection();
            
            String query = "SELECT * FROM users WHERE email = ? AND password = ? LIMIT 1";
            ps = conn.prepareStatement(query);
            ps.setString(1, email);
            ps.setString(2, password);
            
            rs = ps.executeQuery();
            
            // Only create a new user if we found a match.
            if(rs.next()){
                user = new User(rs.getInt("id"),
                                rs.getString("name"),
                                rs.getString("email"),
                                rs.getString("password"),
                                rs.getBoolean("isadmin"));
            }
        }
        catch (SQLException e) {
            throw new DaoException("UserDao.getUserById(): " + e.getMessage()); 
        }
        finally{
            freeResources("UserDao.getUserById(): ",conn,ps,rs);
        }
      
        return user; // COULD BE NULL

    }

    /**
     * Gets the details of a user specified by their unique email address.
     * @param email the users email address.
     * @return the details of a user specified by their unique email address.
     * @throws DaoException
     */
    @Override
    public User getUserByEmail(String email) throws DaoException {

        Connection          conn    = null;
        PreparedStatement   ps      = null;
        ResultSet           rs      = null;  
        User                user    = null;
        
        try{
            conn = getConnection();
            
            String query = "SELECT * FROM users WHERE email = ? LIMIT 1";
            ps = conn.prepareStatement(query);
            ps.setString(1, email);
            
            rs = ps.executeQuery();
            
            // Only create a new user if we found a match.
            if(rs.next()){
                user = new User(rs.getInt("id"),
                                rs.getString("name"),
                                rs.getString("email"),
                                rs.getString("password"),
                                rs.getBoolean("isadmin"));
            }
        }
        catch (SQLException e) {
            throw new DaoException("UserDao.getUserById(): " + e.getMessage()); 
        }
        finally{
            freeResources("UserDao.getUserById(): ",conn,ps,rs);
        }
      
        return user; // could be null
    }

}
